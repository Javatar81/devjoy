package io.devjoy.gitea.k8s.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;

public class GiteaSpec {
	@JsonPropertyDescription("The name of the admin user. Must not be 'admin' because it is reserved.")
	@JsonProperty(defaultValue = "devjoyadmin")
	private String adminUser = "devjoyadmin";
	@JsonPropertyDescription("The email of the admin user")
	@JsonProperty(defaultValue = "admin@example.com")
	private String adminEmail = "admin@example.com";
	@JsonPropertyDescription("The optional admin password. If not set it will be generated. Once set the value will be moved to a secret.")
	private String adminPassword;
	@JsonPropertyDescription("The length of the generated admin password. Value is ignored if adminPassword is set. Min length is 10.")
	private int adminPasswordLength = 10; 
	@JsonPropertyDescription("Size of the storage request of the persistent volume claim. Default value is 4Gi.")
	@JsonProperty(defaultValue = "4Gi")
	private String volumeSize = "4Gi";
	@JsonPropertyDescription("Storage class of the persistent volume claim.")
	private String storageClass;
	@JsonPropertyDescription("The image url to use for Gitea. Default is quay.io/gpte-devops-automation/gitea")
	private String image;
	@JsonPropertyDescription("The image tag to use for Gitea. Default is 1.20")
	private String imageTag;
	@JsonPropertyDescription("The cpu resource limits for the Gitea deployment")
	private String cpuLimit;
	@JsonPropertyDescription("The cpu resource requests for the Gitea deployment")
	private String cpuRequest;
	@JsonPropertyDescription("The memory resource limits for the Gitea deployment")
	private String memoryLimit;
	@JsonPropertyDescription("The memory resource requests for the Gitea deployment")
	private String memoryRequest;
	@JsonPropertyDescription("Enables resource requirements such as cpuLimit, cpuRequest, memoryLimit, and memoryRequest. Default value is true.")
	private boolean resourceRequirementsEnabled;
	@JsonPropertyDescription("Enable this to ask for mail confirmation of registration. Requires Mailer to be enabled.. Default value is false.")
	private boolean registerEmailConfirm;
	@JsonPropertyDescription("Disable registration, after which only admin can create accounts for users. Default value is false.")
	private boolean disableRegistration;
	@JsonPropertyDescription("Enable this to use captcha validation for registration. Default value is false.")
	private boolean enableCaptcha;
	@JsonPropertyDescription("Allow new users to create organizations by default. Default is false.")
	private boolean allowCreateOrganization;
	@JsonPropertyDescription("Create a route / ingress to access for Gitea.")
	@JsonProperty(defaultValue = "true")
	private boolean ingressEnabled = true;
	@JsonPropertyDescription("Enables SSL for Gitea.")
	private boolean ssl;
	@JsonPropertyDescription("Enables SSO using RHSSO and OpenShift.")
	@JsonProperty(defaultValue = "false")
	private boolean sso = false;
	@JsonPropertyDescription("The hostname of the route. If not set it will be generated by OpenShift.")
	private String route;
	@JsonPropertyDescription("The log level for Gitea. Default is Warn.")
	private GiteaLogLevel logLevel;
	@JsonPropertyDescription("The specification for the postgres database.")
	private GiteaPostgresSpec postgres = new GiteaPostgresSpec();
	@JsonPropertyDescription("The specification for the mailer.")
	private GiteaMailerSpec mailer = new GiteaMailerSpec();
	@JsonPropertyDescription("Allows to override arbitrary config properties in the app.ini.")
	private GiteaConfigOverrides configOverrides = new GiteaConfigOverrides(); 
	
	
	public String getAdminUser() {
		return adminUser;
	}
	public void setAdminUser(String adminUser) {
		this.adminUser = adminUser;
	}
	public String getAdminEmail() {
		return adminEmail;
	}
	public void setAdminEmail(String adminEmail) {
		this.adminEmail = adminEmail;
	}
	public int getAdminPasswordLength() {
		return adminPasswordLength;
	}
	public void setAdminPasswordLength(int adminPasswordLength) {
		this.adminPasswordLength = adminPasswordLength;
	}
	public String getAdminPassword() {
		return adminPassword;
	}
	public void setAdminPassword(String giteaAdminPassword) {
		this.adminPassword = giteaAdminPassword;
	}
	public String getVolumeSize() {
		return volumeSize;
	}
	public void setVolumeSize(String giteaVolumeSize) {
		this.volumeSize = giteaVolumeSize;
	}
	public String getStorageClass() {
		return storageClass;
	}
	public void setStorageClass(String giteaStorageClass) {
		this.storageClass = giteaStorageClass;
	}
	public String getImage() {
		return image;
	}
	public void setImage(String giteaImage) {
		this.image = giteaImage;
	}
	public String getImageTag() {
		return imageTag;
	}
	public void setImageTag(String giteaImageTag) {
		this.imageTag = giteaImageTag;
	}
	public String getCpuLimit() {
		return cpuLimit;
	}
	public void setCpuLimit(String giteaCpuLimit) {
		this.cpuLimit = giteaCpuLimit;
	}
	public String getCpuRequest() {
		return cpuRequest;
	}
	public void setCpuRequest(String giteaCpuRequest) {
		this.cpuRequest = giteaCpuRequest;
	}
	public String getMemoryLimit() {
		return memoryLimit;
	}
	public void setMemoryLimit(String giteaMemoryLimit) {
		this.memoryLimit = giteaMemoryLimit;
	}
	public String getMemoryRequest() {
		return memoryRequest;
	}
	public void setMemoryRequest(String giteaMemoryRequest) {
		this.memoryRequest = giteaMemoryRequest;
	}
	public boolean isResourceRequirementsEnabled() {
		return resourceRequirementsEnabled;
	}
	public void setResourceRequirementsEnabled(boolean resourceRequirementsEnabled) {
		this.resourceRequirementsEnabled = resourceRequirementsEnabled;
	}
	public boolean isRegisterEmailConfirm() {
		return registerEmailConfirm;
	}
	public void setRegisterEmailConfirm(boolean registerEmailConfirm) {
		this.registerEmailConfirm = registerEmailConfirm;
	}
	public boolean isDisableRegistration() {
		return disableRegistration;
	}
	public void setDisableRegistration(boolean disableRegistration) {
		this.disableRegistration = disableRegistration;
	}
	public boolean isEnableCaptcha() {
		return enableCaptcha;
	}
	public void setEnableCaptcha(boolean enableCaptcha) {
		this.enableCaptcha = enableCaptcha;
	}
	public boolean isAllowCreateOrganization() {
		return allowCreateOrganization;
	}
	public void setAllowCreateOrganization(boolean allowCreateOrganization) {
		this.allowCreateOrganization = allowCreateOrganization;
	}
	public boolean isSsl() {
		return ssl;
	}
	public void setSsl(boolean giteaSsl) {
		this.ssl = giteaSsl;
	}
	public boolean isSso() {
		return sso;
	}
	public void setSso(boolean sso) {
		this.sso = sso;
	}
	public String getRoute() {
		return route;
	}
	public void setRoute(String giteaRoute) {
		this.route = giteaRoute;
	}
	public GiteaLogLevel getLogLevel() {
		return logLevel;
	}
	public void setLogLevel(GiteaLogLevel logLevel) {
		this.logLevel = logLevel;
	}
	public GiteaPostgresSpec getPostgres() {
		return postgres;
	}
	public void setPostgres(GiteaPostgresSpec postgres) {
		this.postgres = postgres;
	}
	public GiteaMailerSpec getMailer() {
		return mailer;
	}
	public void setMailer(GiteaMailerSpec mailer) {
		this.mailer = mailer;
	}
	public GiteaConfigOverrides getConfigOverrides() {
		return configOverrides;
	}
	public void setConfigOverrides(GiteaConfigOverrides configOverrides) {
		this.configOverrides = configOverrides;
	}
	public boolean isIngressEnabled() {
		return ingressEnabled;
	}
	public void setIngressEnabled(boolean ingressEnabled) {
		this.ingressEnabled = ingressEnabled;
	}
	
}
